version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: nebula-postgres
    environment:
      POSTGRES_USER: nebula
      POSTGRES_PASSWORD: nebula_dev_password
      POSTGRES_DB: nebula_workflows
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nebula"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nebula-network

  minio:
    image: minio/minio:latest
    container_name: nebula-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: nebula_admin
      MINIO_ROOT_PASSWORD: nebula_dev_password
      MINIO_DEFAULT_BUCKETS: nebula-workflows,nebula-artifacts
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - nebula-network

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    container_name: nebula-redis
    command: redis-server --appendonly yes --requirepass nebula_dev_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nebula-network

  # Optional: Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: nebula-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    ports:
      - "5775:5775/udp"   # Zipkin compact
      - "6831:6831/udp"   # Thrift compact
      - "6832:6832/udp"   # Thrift binary
      - "5778:5778"       # Config
      - "16686:16686"     # Web UI
      - "14268:14268"     # HTTP collector
      - "14250:14250"     # gRPC collector
      - "9411:9411"       # Zipkin
    networks:
      - nebula-network

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: nebula-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./scripts/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - nebula-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: nebula-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: nebula_dev_password
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./scripts/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - nebula-network

volumes:
  postgres_data:
  minio_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  nebula-network:
    driver: bridge